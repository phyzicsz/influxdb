version: 2.1
orbs:
  aws-s3: circleci/aws-s3@2.0.0
parameters:
  cross-container-tag:
    # when updating the go version, should also update the go version in go.mod
    description: docker tag for cross build container from quay.io . Created by https://github.com/influxdata/edge/tree/master/dockerfiles/cross-builder .
    type: string
    default: go1.18.7-f2a580ca8029f26f2c8a2002d6851967808bf96d

  workflow:
    type: string
    default: build

commands:
  install_rust:
    steps:
      - run:
          name: Install Rust toolchain
          command: |
            ./scripts/ci/install-rust.sh
            echo 'export PATH=${HOME}/.cargo/bin:${PATH}' >> $BASH_ENV

jobs:
  build_binaries:
    docker:
      - image: quay.io/influxdb/cross-builder:<< pipeline.parameters.cross-container-tag >>
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - restore_cache:
          keys:
            # We save the cache from this one, so don't restore a cache with old junk and then save new stuff alongside.
            # Start either with the exact right cache, or completely fresh.
            - influxdb-cache-v1-{{ checksum "go.mod" }}
      - run:
          name: Get InfluxDB Version
          command: |
            PREFIX=1.x .circleci/scripts/get-version
      - run:
          name: Build source tarball
          command: |
            set -x

            printf '{
                "version": "%s",
                "branch": "%s",
                "sha": "%s"
            }' "${VERSION}" "${CIRCLE_BRANCH}" "${CIRCLE_SHA1}" >"$(pwd)/.metadata.json"

            #
            # Prebuild the man pages so that consumers of the source tarball don't have to build it themselves.
            (cd man && make build && gzip -9 ./*.1)

            mkdir -p ./tarball
            TARBALL_NAME="./tarball/influxdb-src-${CIRCLE_SHA1}.tar.gz"
            tar --exclude-vcs --exclude './tarball' --transform 'flags=r;s|^|influxdb/|' -vczf "${TARBALL_NAME}" .
      - store_artifacts:
          path: tarball/
      - persist_to_workspace:
          root: .
          paths:
            - tarball
      - run:
          name: Build binaries
          command: |
            set -x

            tarsum()
            {
              FROM_DIR=$1
              TARBALL_PATH=$2
              tar -C $FROM_DIR -cvzf ${TARBALL_PATH} .
              md5sum ${TARBALL_PATH} > ${TARBALL_PATH}.md5
              sha256sum ${TARBALL_PATH} > ${TARBALL_PATH}.sha256
            }

            export CC="$(xcc linux x86_64)"
            export CGO_ENABLED=1

            # linux amd64 (static build)
            TMPOUTDIR=$(mktemp -d)
            export GOOS=linux
            export GOARCH=amd64
            for cmd in github.com/influxdata/influxdb/cmd/{influxd,influx,influx_inspect}
            do
              go build \
                -o "${TMPOUTDIR}/$(basename $cmd)" \
                -tags "netgo,osusergo,static_build" \
                -buildmode=pie \
                -ldflags="-s
                  -X \"main.version=${VERSION}\"
                  -X \"main.branch=${CIRCLE_BRANCH}\"
                  -X \"main.commit=${CIRCLE_SHA1}\"
                  -linkmode=external
                  -extld=${CC}
                  -extldflags \"-fno-PIC -static-pie -Wl,-z,stack-size=8388608\"" \
                ${cmd}
            done

            mkdir -p ./bins
            tarsum $TMPOUTDIR ./bins/influxdb_bin_${GOOS}_${GOARCH}-${CIRCLE_SHA1}.tar.gz
      - store_artifacts:
          path: bins/
      - persist_to_workspace:
          root: .
          paths:
              - bins
      - save_cache:
          key: influxdb-cache-v1-{{ checksum "go.mod" }}
          paths:
            - /go/pkg/mod
            - /root/.cargo
            - /root/.cache/go-build
  build_packages:
    machine:
      enabled: true
      docker_layer_caching: true
      image: ubuntu-2004:202107-02
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - run:
          name: Build packages
          command: |
            set -x

            WORKING_DIR=$(pwd)
            OUTDIR=${WORKING_DIR}/packages

            # InfluxDB debs and rpms
            # linux
            "${WORKING_DIR}/releng/packages/build.bash" \
              -s "/tmp/workspace/tarball/influxdb-src-${CIRCLE_SHA1}.tar.gz" \
              -b "/tmp/workspace/bins/influxdb_bin_linux_amd64-${CIRCLE_SHA1}.tar.gz" \
              -O linux -A amd64 \
              -o "$OUTDIR"
      - store_artifacts:
          path: packages/
      - persist_to_workspace:
          root: .
          paths:
            - packages

  sign_packages:
    machine:
      enabled: true
      docker_layer_caching: true
      image: ubuntu-2004:202107-02
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - run:
          name: Sign Package Artifacts
          command: |
            .circleci/scripts/sign-packages
      - store_artifacts:
          path: packages/
      - persist_to_workspace:
          root: .
          paths:
            - packages

  test_pkgs_64bit:
    machine:
      enabled: true
      docker_layer_caching: true
      image: ubuntu-2004:202107-02
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - run:
          name: Test 64 bit packages install
          command: |
            set -x
            export WORKING_DIR=$(pwd)
            # Using subshells with find to get full path of real package files, rather than predicting or hardcoding
            # The glob pattern with -prune causes find to only return files rooted in packages,
            # thereby avoiding files whose names would match, but are in subdirectories, i.e. packages/static.
            "${WORKING_DIR}/releng/packages/spec/clean_install/run.bash" -D \
              -p "$(find "/tmp/workspace/packages"/* -prune -name 'influxdb*amd64.deb')"

            "${WORKING_DIR}/releng/packages/spec/clean_install/run.bash" -R \
              -p "$(find "/tmp/workspace/packages"/* -prune -name 'influxdb*x86_64.rpm')"

  static_code_checks:
    docker:
      - image: quay.io/influxdb/cross-builder:<< pipeline.parameters.cross-container-tag >>
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - run:
          name: checkfmt
          command: ./checkfmt.sh
      - run:
          name: codegen
          command: ./generate.sh
      - run:
          name: go vet
          command: go vet ./...
  unit_test:
    docker:
      - image: quay.io/influxdb/cross-builder:<< pipeline.parameters.cross-container-tag >>
    steps:
      - checkout
      - restore_cache:
          keys:
            - influxdb-cache-v1-{{ checksum "go.mod" }}
            - influxdb-cache-v1
      - run:
          name: Execute tests
          command: |
            set -x
            go test -count 1 ./...
          no_output_timeout: 1500s
      - store_test_results:
          path: junit/
  unit_test_tsi:
    docker:
      - image: quay.io/influxdb/cross-builder:<< pipeline.parameters.cross-container-tag >>
    resource_class: large
    steps:
      - checkout
      - restore_cache:
          keys:
            - influxdb-cache-v1-{{ checksum "go.mod" }}
            - influxdb-cache-v1
      - run:
          name: Execute tests
          command: |
            set -x
            export INFLUXDB_DATA_INDEX_VERSION="tsi1"
            go test -count 1 ./...
          no_output_timeout: 1500s
      - store_test_results:
          path: junit-tsi/
  unit_test_race:
    docker:
      - image: quay.io/influxdb/cross-builder:<< pipeline.parameters.cross-container-tag >>
    resource_class: large
    steps:
      - checkout
      - restore_cache:
          keys:
            - influxdb-cache-v1-{{ checksum "go.mod" }}
            - influxdb-cache-v1
      - run:
          name: Execute tests
          command: |
            set -x
            export GORACE="halt_on_error=1"
            go test -count 1 -race ./...
          no_output_timeout: 1500s
      - store_test_results:
          path: junit-race/
  fluxtest:
    docker:
      - image: quay.io/influxdb/cross-builder:<< pipeline.parameters.cross-container-tag >>
    steps:
      - checkout
      - run:
          name: Execute test
          command: ./test-flux.sh || exit 1
          no_output_timeout: 1500s

  changelog:
    docker:
      - image: quay.io/influxdb/changelogger:d7093c409adedd8837ef51fa84be0d0f8319177a
    steps:
      - checkout
      - run:
          name: Generate Changelog
          command: |
            PRODUCT=OSS changelogger
      - store_artifacts:
          path: changelog_artifacts/
      - persist_to_workspace:
          root: .
          paths:
            - changelog_artifacts

  s3-publish-changelog:
    parameters:
      build_type:
        type: string
    docker:
      - image: ubuntu:latest
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - run:
          name: Publish CHANGELOG.md to S3
          command: |
            export DEBIAN_FRONTEND=noninteractive
            apt-get update
            apt-get install -y awscli

            pushd /tmp/workspace/changelog_artifacts/

            case "<< parameters.build_type >>"
            in
              nightly)
                aws s3 cp CHANGELOG.md "s3://dl.influxdata.com/platform/nightlies/<< pipeline.git.branch >>/CHANGELOG.md"
                ;;
              release)
                aws s3 cp CHANGELOG.md "s3://dl.influxdata.com/influxdb/releases/CHANGELOG.<< pipeline.git.tag >>.md"
                ;;
            esac

  s3-publish-packages:
    docker:
      - image: ubuntu:latest
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - run:
          name: Publish Packages to S3
          command: |
            export DEBIAN_FRONTEND=noninteractive
            apt-get update
            apt-get install -y awscli

            aws s3 sync /tmp/workspace/packages "s3://dl.influxdata.com/influxdb/releases"

release_filter: &release_filter
  filters:
    tags:
      # This regex matches what is found in 'scripts/get-version' with the
      # '[[:digit:]]' transformed into '\d'. This also excludes release
      # candidate detection, because this filter only matches against
      # full releases.
      only: /^v(\d+)(?:\.(\d+))?(?:\.(\d+))?$/
    branches:
      ignore: /.*/

workflows:
  version: 2.1
  release:
    when:
      equal: [ << pipeline.parameters.workflow >>, build ]
    jobs:
      - build_binaries:
          <<: *release_filter
      - build_packages:
          <<: *release_filter
          requires:
            - build_binaries
      - sign_packages:
          <<: *release_filter
          requires:
            - build_packages
      - test_pkgs_64bit:
          <<: *release_filter
          requires:
            - build_packages
      - changelog:
          <<: *release_filter
      - s3-publish-changelog:
          <<: *release_filter
          build_type: release
          requires:
            - changelog
      - s3-publish-packages:
          <<: *release_filter
          requires:
            - sign_packages
      - static_code_checks:
          <<: *release_filter
      - fluxtest:
          <<: *release_filter
      - unit_test:
          <<: *release_filter
      - unit_test_tsi:
          <<: *release_filter
      - unit_test_race:
          <<: *release_filter

  on_push:
    when:
      equal: [ << pipeline.parameters.workflow >>, build ]
    jobs:
      - build_binaries
      - build_packages:
          requires:
            - build_binaries
      - test_pkgs_64bit:
          requires:
            - build_packages
      - static_code_checks
      - fluxtest
      - unit_test
      - unit_test_tsi
      - unit_test_race
  nightly:
    when:
      and:
        # This requires a pipeline trigger with a custom "workflow" parameter
        # set to "nightly". Since we want to trigger this workflow on several
        # branches, we cannot use the trigger name as suggested by the
        # documentation.
        #
        # For more information:
        # https://circleci.com/docs/scheduled-pipelines/
        - equal: [ << pipeline.trigger_source >>, scheduled_pipeline ]
        - equal: [ << pipeline.parameters.workflow >>, nightly ]
    jobs:
      - changelog
      - s3-publish-changelog:
          build_type: nightly
          requires:
            - changelog
      - static_code_checks
      - fluxtest
      - unit_test
      - unit_test_tsi
      - unit_test_race
      - build_binaries:
          requires:
            - changelog
            - static_code_checks
            - fluxtest
            - unit_test
            - unit_test_tsi
            - unit_test_race
      - build_packages:
          requires:
            - build_binaries
      - test_pkgs_64bit:
          requires:
            - build_packages
